trigger:
  branches:
    include:
      - main
      - develop
      - release-*
  paths:
    exclude: 
      - README.md
      - LICENSE.md
      - NuGet.Config
      - github_changelog_generator
      - .gitignore
  tags:
    include: 
      - v*

# PR always trigger build

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

jobs:

##############################
- job: Get_Build_Flags
  pool:
    vmImage: 'windows-2022'

  steps:
  - checkout: self
    fetchDepth: 1

  # get commit message
  - powershell: |

      # default to false
      $update = $false

      if($env:Build_Reason -eq 'PullRequest')
      {
        # PR build, nothing interesting in commit message
      }
      else
      {
        # build is not from a PR

        # get commit ID
        $commitId = git rev-parse HEAD
        
        # get PR associate with commit
        $prUrl = "https://api.github.com/repos/nanoframework/metadata-processor/commits/$commitId/pulls"
        $commit = Invoke-RestMethod -Uri $prUrl -ContentType "application/json" -Headers @{"Accept"="application/vnd.github.groot-preview+json"} -Method GET

        if($commit -ne $null)
        {
          # there is a PR, check labels
          $updateDependents = $commit.labels | where {$_.Name -eq 'CI: Update Dependents'}
          if($updateDependents -ne $null)
          {
            $update = $true
          }
        }
        else
        {
          # not a PR, get subject and commit message for commit
          $commitMessage = git log --format='%B' -1

          # need to flatten message by removing new lines
          $commitMessage = $commitMessage -replace "`r`n", " "

          if($commitMessage -like "***UPDATE_DEPENDENTS***")
          {
            $update = $true
          }
        }
      }

      # set variable to foward to jobs
      echo "##vso[task.setvariable variable=RUN_UPDATE_DEPENDENTS;isOutput=true]$update"
    name: GetPRLabels
    displayName:  Check build labels

##############################
# build MDP
- job: Build_MDP
  condition: eq(variables['UPDATE_DEPENDENTS'], 'false')

  dependsOn:
    - Get_Build_Flags

  pool:
    vmImage: 'windows-2022'

  variables:
    DOTNET_NOLOGO: true
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    solution: 'nanoFramework.Tools.MetadataProcessor.sln'
    NF_MDP_MSBUILDTASK_PATH: '$(System.DefaultWorkingDirectory)/MetadataProcessor.MsBuildTask/bin/Release'

  steps:

  # need this here in order to persist GitHub credentials, do a shallow fetch AND init submodules
  - checkout: self
    persistCredentials: true
    submodules: true

  - script: |
      git config --global user.email "nanoframework@outlook.com"
      git config --global user.name "nfbot"
    displayName: Setup git identity

  - template: azure-pipelines-templates/install-nuget.yml@templates  

  - task: DotNetCoreCLI@2  
    displayName: Install NBGV tool
    inputs:
      command: custom
      custom: tool
      arguments: install -g nbgv

  - task: InstallnFBuildComponents@1
    condition: ne( variables['StartReleaseCandidate'], true )
    displayName: Install nanoFramework MSBuild components

  - task: NuGetCommand@2
    displayName: NuGet restore
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: 'NuGet.config'

  # - task: NuGetCommand@2
  #   displayName: NuGet restore mscorlib
  #   inputs:
  #     restoreSolution: 'MetadataProcessor.Tests\mscorlib\nanoFramework.CoreLibrary.sln'
  #     feedsToUse: config
  #     nugetConfigPath: 'NuGet.config'
  
  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      msbuildArgs: '/p:PublicRelease=true'
      configuration: '$(buildConfiguration)'

  # - task: PowerShell@2
  #   displayName: Remove nano Test Adapter
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       Get-ChildItem -Path $env:System_DefaultWorkingDirectory -Include "nanoFramework.TestAdapter.dll" -Recurse |
  #       Foreach-object {
  #           Remove-Item -Path $_.fullname
  #       }

  # - task: VisualStudioTestPlatformInstaller@1
  #   condition: succeeded()
  #   displayName: 'Visual Studio Test Platform Installer'
  #   inputs:
  #     versionSelector: latestStable

  # - task: VSTest@2
  #   condition: succeeded()
  #   displayName: 'Running tests'
  #   inputs:
  #     testSelector: 'testAssemblies'
  #     pathtoCustomTestAdapters: 
  #     testAssemblyVer2: |
  #       **\*Tests*.dll
  #       !**\*TestAdapter*.dll
  #       !**\*TestFramework*.dll
  #       !**\obj\**
  #     searchFolder: '$(System.DefaultWorkingDirectory)'
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'
  #     diagnosticsEnabled: true
  #     vsTestVersion: toolsInstaller
  #     codeCoverageEnabled: true

  - task: CopyFiles@1
    condition: succeeded()
    displayName: Collecting deployable artifacts
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      Contents: |
        **\bin\Release\nanoFramework.Tools.MetaDataProcessor.exe
        **\bin\Release\nanoFramework.Tools.MetadataProcessor.MsBuildTask.dll
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true

  - task: CopyFiles@1
    condition: succeeded()
    displayName: Collecting NuGet package artifact
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      Contents: |
        **\nanoFramework.Tools*.nupkg
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true

  - task: DotNetCoreCLI@2
    displayName: Install SignTool tool
    condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], '') )
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . SignClient
  
  - pwsh: |
      .\SignClient "Sign" `
      --baseDirectory "$(Build.ArtifactStagingDirectory)" `
      --input "**/*.nupkg" `
      --config "$(Build.Repository.LocalPath)\config\SignClient.json" `
      --filelist "$(Build.Repository.LocalPath)\config\filelist.txt" `
      --user "$(SignClientUser)" `
      --secret '$(SignClientSecret)' `
      --name ".NET nanoFramework Metadata Processor" `
      --description ".NET nanoFramework Metadata Processor" `
      --descriptionUrl "https://github.com/$env:Build_Repository_Name"
    displayName: Sign packages
    continueOnError: true
    condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], '') )
    
  # publish artifacts (only possible if this is not a PR originated on a fork)
  - task: PublishBuildArtifacts@1
    condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
    displayName: Publish deployables artifacts
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: deployables
      ArtifactType: Container

  # push NuGet packages to Azure Artifacts feed (always happens except on PR builds)
  - task: NuGetCommand@2
    displayName: Push NuGet packages to Azure Artifacts
    condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], '') )
    continueOnError: true
    inputs:
      command: push
      nuGetFeedType: external
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      publishFeedCredentials: 'AzureArtifacts'
      allowPackageConflicts: true

  # create or update GitHub release
  - task: GithubRelease@1
    condition: >-
      and(
        succeeded(),
        eq(variables['System.PullRequest.PullRequestId'], ''),
        not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
      )
    displayName: Create/Update GitHub release
    inputs:
      gitHubConnection: 'github.com_nano-$(System.TeamProject)'
      tagSource: userSpecifiedTag
      tag: v$(GitBuildVersionSimple)
      title: 'nanoFramework Metadata Processor v$(GitBuildVersionSimple)'
      releaseNotesSource: inline
      releaseNotesInline: 'add description here'
      assets: '$(Build.ArtifactStagingDirectory)/*'
      assetUploadMode: replace
      isPreRelease: false
      addChangeLog: false

##############################
- job: Update_Dependents
  condition: >-
    and(
      or(
        eq(dependencies.Get_Build_Flags.outputs['GetPRLabels.RUN_UPDATE_DEPENDENTS'], 'true'),
        eq(variables['UPDATE_DEPENDENTS'], 'true')
      ),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )

  dependsOn:
    - Get_Build_Flags
    - Build_MDP

  pool:
    vmImage: 'windows-2022'

  variables:
    DOTNET_NOLOGO: true

  steps:
  # need this here in order to persist GitHub credentials 
  - checkout: self
    fetchDepth: 100
  
  - template: azure-pipelines-templates/install-nbgv-tool.yml@templates
  
  - template: azure-pipelines-templates/install-nuget.yml@templates  

  - script: nbgv cloud -a -c
    condition: succeeded()
    displayName: Set build number

  # update dependencies
  - task: PowerShell@2
    displayName: Update dependent class libs
    inputs:
      targetType: filePath
      filePath: azure-pipelines/update-dependencies.ps1
    env:
      MY_GITHUB_TOKEN: $(GitHubToken)

##################################
# report build failure to Discord
- job: Report_Build_Failure
  dependsOn:
  - Build_MDP
  condition: failed('Build_MDP')

  pool:
    vmImage: 'windows-2022'

  steps:

  - checkout: self
    fetchDepth: 1

  # step from template @ nf-tools repo
  - template: azure-pipelines-templates/discord-webhook.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
